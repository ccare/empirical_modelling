%scout
window DoNaLDdefaultWin;
display donaldscreen;
integer donaldscreen_height;
integer donaldscreen_width;
window graphWindow;
display screen;
integer screen_height;
integer screen_width;
window DoNaLDdefaultWin = {
    type: DONALD
    box: [{0, 0}, {500, 500}]
    pict: "DoNaLD"
    border: 1
};
integer donaldscreen_height = 500;
integer donaldscreen_width = 500;
window graphWindow = {
    type: DONALD
    box: [{10, 10}, {screen_width - 10, screen_height - 10}]
    pict: "viewGraph"
    xmin: 0
    ymin: 0
    xmax: screen_width - 20
    ymax: screen_height - 20
    bgcolor: "white"
    border: 2
    sensitive: ON
};
display screen = <graphWindow>;
integer screen_height = 500;
integer screen_width = 500;

%eden
nodeClicked = "";

proc graphClick : graphWindow_mouse {
	auto x,y,node;
if (graphWindow_mouse[1] == 1) {
	if (graphWindow_mouse[2] == 4) {
		buttonClicked=graphWindow_mouse[1];
		x = 10*round(graphWindow_mouse[4]/10);
		y = 10*round(graphWindow_mouse[5]/10);
		node = getNode([x,y],nodes);
		if (node != "") {
			nodeClicked=node;
		}
	}
	else if (graphWindow_mouse[2] == 5 && nodeClicked != "") 
{
		x = 10*round(graphWindow_mouse[4]/10);
		y = 10*round(graphWindow_mouse[5]/10);
		nodes = updatePosition(nodeClicked,[x,y],nodes);
		nodeClicked = "";
	}
}
if (graphWindow_mouse[1] == 3) {
	if (graphWindow_mouse[2] == 4) {
		buttonClicked=graphWindow_mouse[1];
		x = 10*round(graphWindow_mouse[4]/10);
		y = 10*round(graphWindow_mouse[5]/10);
		node = getNode([x,y],nodes);
		if (node != "") {
			nodeClicked=node;
		}
	}
	else if (graphWindow_mouse[2] == 5 && nodeClicked != "") 
{
		x = 10*round(graphWindow_mouse[4]/10);
		y = 10*round(graphWindow_mouse[5]/10);
		node = getNode([x,y],nodes);
		if (node != "" && node != nodeClicked) {
			links = addRemoveLink([nodeClicked,node],links);
		}
	}
}

}

%donald
viewport viewGraph
int radius
radius = 5
%eden


func getPosition {
 para node,nodeList;
 auto i,rtn;
 rtn = [-10,-10];
 for (i=1;i<=nodeList#;i++) {
  if (nodeList[i][1] == node) {rtn = nodeList[i][2];}
 }
 return rtn;
}


func getNode {
 para position,nodeList;
 auto i,rtn;
 rtn = "";
 for (i=1;i<=nodeList#;i++) {
  if (nodeList[i][2] == position) {rtn = nodeList[i][1];}
 }
 return rtn;
}


func updatePosition {
 para node,position,nodeList;
 auto i;
 for (i=1;i<=nodeList#;i++) {
  if (nodeList[i][1] == node) {nodeList[i][2] = position;}
 }
 return nodeList;
}


nodeMacroStr = "%donald
openshape ?1
within ?1 {
 point position
 circle dot

 dot = circle(position,~/radius)
}
%eden
A_?1_dot =\"fill=solid,outlinecolor=black,color=red\";
_?1_position is 
cart(getPosition(\"?1\",nodes)[1],getPosition(\"?1\",nodes)[2]);
";

proc addNode {
	para node;
	if (node != "") {
		nodes=nodes//[[node,[10,10]]];
		execute(macro(nodeMacroStr,node));
	}
}




maxlinks=0;

proc updateLinks : links {
	auto i,cmd;
	cmd="%donald\n";
	if (links# > maxlinks) {maxlinks = links#;}
	for (i=1;i<=links#;i++) {
		cmd=cmd//"line l"//str(i)//"\n";
		
cmd=cmd//"l"//str(i)//"=["//links[i][1]//"/position,"//links[i][2]//"/position]\n"
;
	}
	cmd=cmd//"%eden\n";
	for (i;i<=maxlinks;i++) {
		cmd=cmd//"_l"//str(i)//" = @;\n";
	}
	execute(cmd);
}

func addRemoveLink {
	para link,linkList;
	auto i,newLinkList,found;
	found=0;
	newLinkList=[];
	for(i=1;i<=linkList#;i++) {
		if (linkList[i] == link) {found=1;}
		else {newLinkList = newLinkList//[linkList[i]];}
	}
	if (found != 1) {
		newLinkList = newLinkList//[link];
	}
	return newLinkList;
}
nodes=[];
links=[];
addNode("a");
~graphWindow_mouse = [1,4,0,6.98544930909, 9.729727626];
~graphWindow_mouse = [1,5,256,253.472017787, 11.6756731512];
addNode("b");
~graphWindow_mouse = [1,4,0,9.9792132987, 10.7027003886];
~graphWindow_mouse = [1,5,256,162.661176769, 25.2972918276];
~graphWindow_mouse = [3,4,0,252.474096457, 8.7567548634];
~graphWindow_mouse = [3,5,1024,162.661176769, 31.1351284032];

