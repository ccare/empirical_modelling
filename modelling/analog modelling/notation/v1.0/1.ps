%!PS-Adobe-3.0
%%Title: clock.e, integrators.e, modes.e, panel.e, parser.e, Run.e
%%For: Charles Care
%%Creator: a2ps version 4.13
%%CreationDate: Mon Nov  8 15:29:58 2004
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 8
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%Requirements: Tumble Duplex 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
%% Pagedevice definitions:
countdictstack
% Push our own mark, since there can be several PS marks pushed depending
% where the failure really occured.
/a2ps_mark
{
%%BeginFeature: *Tumble False
  (<<) cvx exec /Tumble (false) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
%%BeginFeature: *Duplex True
  (<<) cvx exec /Duplex (true) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
} stopped
% My cleartomark
{ /a2ps_mark eq { exit } if } loop
countdictstack exch sub dup 0 gt
{
  { end } repeat
}{
  pop
} ifelse
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## clock.e                                          Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(##------------------------------------------------------------------------------) c n
(## Observables) N
(##------------------------------------------------------------------------------) N
() p n
(%eden) N
(## The computer time \(incremented by the clock\)) c n
(AN_time=0;) p n
() N
(## The period of time \(computer time\) that the computer runs) c n
(##  before reseting \(rep-op mode only\)) N
(AN_repopPeriod=0;) p n
() N
(## AN_clockGoing is an observable used to control the clocking) c n
(##     0 - stopped) N
(##     1 - running \(compute mode\)) N
(##     2 - running \(rep-op mode\)) N
() p n
(##------------------------------------------------------------------------------) c n
(## Procedures) N
(##------------------------------------------------------------------------------) N
() p n
(%eden) N
() N
(## Normal \(compute mode\) clock. Runs when AN_clockGoing = 1) c n
(proc AN_clock {) p n
(    ) S
(if) K
( \(AN_clockGoing == 1\) {) p n
(       AN_time++;) N
(       todo\(") S
(AN_clock\(\);) str
("\);) p n
(    }) N
(}) N
() N
(## Rep-op clock: Continually resets after AN_repopPeriod time units.) c n
(proc AN_repopClock {) p n
(    ) S
(if) K
( \(AN_clockGoing == 2\) {) p n
(    ) S 8 T () S
(if) K
( \(AN_time < AN_repopPeriod\) {) p n
(       ) S 8 T () S 16 T (AN_time++;) N
() S 8 T (} ) S
(else) K
( {) p n
() S 8 T () S 16 T (AN_setInitialConditions\(\);) N
() S 8 T () S 16 T (AN_time=0;) N
() S 8 T (}) N
(       todo\(") S
(AN_repopClock\(\);) str
("\);) p n
(    }) N
(}) N
() N
(## Procedure to activate the clocks) c n
(proc AN_startClock : AN_clockGoing {) p n
(    ) S
(if) K
( \(AN_clockGoing == 1\) {) p n
(        todo\(") S
(AN_clock\(\);) str
("\);) p n
(    }) N
(    ) S
(if) K
( \(AN_clockGoing == 2\) {) p n
(        todo\(") S
(AN_repopClock\(\);) str
("\);) p n
(    }) N
(}) N
(clock.e) (Page 1/1) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(clock.e) (1/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## integrators.e                                    Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(##------------------------------------------------------------------------------) c n
(## Observables dependent on the eddi tables) N
(##------------------------------------------------------------------------------) N
() p n
(AN_initialConditions is tail\(AN_tables_InitialConditions\);) N
(AN_integrators is tail\(AN_tables_Integrators\);) N
() N
(##------------------------------------------------------------------------------) c n
(## Procedures to control the integrators) N
(##------------------------------------------------------------------------------) N
() p n
(## Set up the integrators in their initial conditions. This data is read from an) c n
(##  eddi table and definitons are made to reflect the desired state.) N
() p n
(proc AN_setInitialConditions {) N
(   ) S
(for) K
( \(AN_i=1; AN_i <= AN_initialConditions# ; AN_i++\)) p n
(   {) N
(   todo\(AN_initialConditions[AN_i][1] // ") S
( is ) str
(" // AN_initialConditions[AN_i][2] /) p n
(/ ") S
(;) str
("\);) p n
(   }) N
(}) N
() N
(## Procedure to perform integration \(from info stored in eddi tables\).) c n
(##  This is triggered off AN_time. The guard \(AN_time > 0\) stops the ) N
(##   definitions AN_time = 0 starting the integrator.) N
() p n
(proc AN_integrate : AN_time {) N
(   ) S
(if) K
( \(AN_time > 0\) {) p n
(      ) S
(for) K
( \(AN_i=1; AN_i <= AN_integrators# ; AN_i++\)) p n
(      {) N
(      execute\(AN_integrators[AN_i][1] // ") S
( = ) str
(" ) p n
(           // AN_integrators[AN_i][1] // ") S
( + ) str
(" // AN_integrators[AN_i][2] // ") p
(;) str
("\)) p n
(;) N
(      }) N
(   }) N
(}) N
() N
(##------------------------------------------------------------------------------) c n
(## Overload) N
(##------------------------------------------------------------------------------) N
() p n
(## Filter function to protect against overload) c n
(func AN_filter {) p n
(    ) S
(if) K
( \($1 > 1.0\) {AN_overloaded\($1\);) p
(return) K
( 1;}) p n
(    ) S
(else) K
( ) p
(if) K
( \($1 < -1.0\) {AN_overloaded\($1\);) p
(return) K
( -1;}) p n
(    ) S
(else) K
( {) p
(return) K
( $1;}) p n
(}) N
() N
(## OVERLOAD WARNING MESSAGE) c n
(proc AN_overloaded {) p n
(      writeln\(") S
(WARNING: Analogue Computer in OVERLOAD with value ) str
(" // str\($1\) //) p n
(      ") S
( MU) str
("\);) p n
(}) N
() N
(##------------------------------------------------------------------------------) c n
(## Reference Values) N
(integrators.e) (Page 1/2) (Nov 08, 04 15:29) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##------------------------------------------------------------------------------) c n
() p n
(## Running this proc. causes all the dependencies to be) c n
(##  touched and for overloads to be noticed.) N
(proc setReference {) p n
() S 8 T (AN_REFERENCE_ZERO=0;) N
() S 8 T (AN_REFERENCE_POSITIVE=1.0;) N
() S 8 T (AN_REFERENCE_NEGATIVE=-1.0;) N
(}) N
(## Run once to initialise) c n
(setReference) l
(\(\);) p n
(integrators.e) (Page 2/2) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(integrators.e) (2/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## modes.e                                          Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(##------------------------------------------------------------------------------) c n
(## Procedures to set state to reflect different modes of operation) N
(##------------------------------------------------------------------------------) N
(%eden) p n
(proc AN_potset {) N
(      AN_mode_potset=1;) N
(      AN_mode_pc=0;) N
(      AN_mode_hold=0;) N
(      AN_mode_compute=0;) N
(      AN_mode_repop=0;) N
(      AN_clockGoing=0;) N
(      AN_time=0;) N
(      setReference\(\);) N
(}) N
(proc AN_pc {) N
(      AN_mode_potset=0;) N
(      AN_mode_pc=1;) N
(      AN_mode_hold=0;) N
(      AN_mode_compute=0;) N
(      AN_mode_repop=0;) N
(      AN_clockGoing=0;) N
(      setReference\(\);) N
(      AN_setInitialConditions\(\);) N
(}) N
(proc AN_hold {) N
(      AN_mode_potset=0;) N
(      AN_mode_pc=0;) N
(      AN_mode_hold=1;) N
(      AN_mode_compute=0;) N
(      AN_mode_repop=0;) N
(      AN_clockGoing=0;) N
(}) N
(proc AN_compute {) N
(      AN_mode_potset=0;) N
(      AN_mode_pc=0;) N
(      AN_mode_hold=0;) N
(      AN_mode_compute=1;) N
(      AN_mode_repop=0;) N
(      AN_clockGoing=1;) N
(}) N
(proc AN_repop {) N
(      AN_mode_potset=0;) N
(      AN_mode_pc=0;) N
(      AN_mode_hold=0;) N
(      AN_mode_compute=0;) N
(      AN_mode_repop=1;) N
(      AN_clockGoing=2;) N
(}) N
() N
(## Initialise Computer in POT SET.) c n
(AN_potset) l
(\(\);) p n
(modes.e) (Page 1/1) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(modes.e) (3/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## panel.e                                          Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(##------------------------------------------------------------------------------) c n
(## Add new window) N
(##------------------------------------------------------------------------------) N
(%eden) p n
(OpenDisplay\(") S
(panel) str
(", 120, 230\);) p n
(proc panel_display_screen : panel { DisplayScreen\(&panel, ") S
(panel) str
("\); }) p n
() N
(##------------------------------------------------------------------------------) c n
(## Scout Strings for the background of each button) N
(##------------------------------------------------------------------------------) N
() p n
(%scout) N
() N
(string AN_panel_potSet_bg;) N
(string AN_panel_pc_bg;) N
(string AN_panel_hold_bg;) N
(string AN_panel_compute_bg;) N
(string AN_panel_repop_bg;) N
() N
(##------------------------------------------------------------------------------) c n
(## Scout Strings for the values of time and rep-op period) N
(##------------------------------------------------------------------------------) N
() p n
(string AN_panel_time;) N
(string AN_panel_repopPeriod;) N
() N
(##------------------------------------------------------------------------------) c n
(## Scout windows \(one for each button\)) N
(##------------------------------------------------------------------------------) N
() p n
(window AN_panel_title = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(Mode) str
(") p n
(  frame: \([{10, 5}, {110, 20}]\)) N
(  sensitive: ON) N
(    alignment: CENTRE) N
(  font: ") S
({helvetica 12 bold}) str
(") p n
(};) N
(window AN_panel_potSet = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(POT SET) str
(") p n
(  frame: \([{10, 30}, {110, 45}]\)) N
(  sensitive: ON) N
(  border: 1) N
(    bgcolour: AN_panel_potSet_bg) N
(    alignment: CENTRE) N
(};) N
(window AN_panel_pc = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(RESET) str
(") p n
(  frame: \([{10, 50}, {110, 65}]\)) N
(  sensitive: ON) N
(  border: 1) N
(    bgcolour: AN_panel_pc_bg) N
(    alignment: CENTRE) N
(};) N
(panel.e) (Page 1/3) (Nov 08, 04 15:29) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(window AN_panel_hold = {) p n
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(HOLD) str
(") p n
(  frame: \([{10, 70}, {110, 85}]\)) N
(  sensitive: ON) N
(  border: 1) N
(    bgcolour: AN_panel_hold_bg) N
(    alignment: CENTRE) N
(};) N
(window AN_panel_compute = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(COMPUTE) str
(") p n
(  frame: \([{10, 90}, {110, 105}]\)) N
(  sensitive: ON) N
(  border: 1) N
(    bgcolour: AN_panel_compute_bg) N
(    alignment: CENTRE) N
(};) N
(window AN_panel_repop = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(REP-OP) str
(") p n
(  frame: \([{10, 110}, {110, 125}]\)) N
(  sensitive: ON) N
(  border: 1) N
(    bgcolour: AN_panel_repop_bg) N
(    alignment: CENTRE) N
(};) N
(window AN_panel_clockTitle = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(Clock) str
(") p n
(  frame: \([{10, 135}, {110, 150}]\)) N
(    alignment: CENTRE) N
(  font: ") S
({helvetica 12 bold}) str
(") p n
(};) N
(window AN_panel_clock = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: AN_panel_time) N
(  frame: \([{10, 155}, {110, 170}]\)) N
(    alignment: CENTRE) N
(};) N
(window AN_panel_periodTitle = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: ") S
(Period) str
(") p n
(  frame: \([{10, 180}, {110, 195}]\)) N
(    alignment: CENTRE) N
(  font: ") S
({helvetica 12 bold}) str
(") p n
(};) N
(window AN_panel_period = {) N
(  ) S
(type) K
(: TEXT) p n
(  string: AN_panel_repopPeriod) N
(  frame: \([{10, 205}, {110, 220}]\)) N
(    alignment: CENTRE) N
(};) N
() N
(##------------------------------------------------------------------------------) c n
(## Add windows to display) N
(##------------------------------------------------------------------------------) N
() p n
(display panel;) N
(panel=<AN_panel_title / AN_panel_potSet / AN_panel_pc / AN_panel_hold) N
(        / AN_panel_compute / AN_panel_repop) N
() S 8 T (/ AN_panel_clockTitle / AN_panel_clock) N
(panel.e) (Page 2/3) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(panel.e) (4/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (/ AN_panel_periodTitle / AN_panel_period>;) N
() N
(##------------------------------------------------------------------------------) c n
(## `Listening' procedures, one for each button \(executes change-mode procedures\)) N
(##------------------------------------------------------------------------------) N
() p n
(%eden) N
(proc AN_panel_potSet_click : ~AN_panel_potSet_mouse_1 {) N
(   ) S
(if) K
( \(~AN_panel_potSet_mouse_1[2] == 5\) {) p n
() S 8 T (AN_potset\(\);) N
(   }) N
(}) N
(proc AN_panel_pc_click : ~AN_panel_pc_mouse_1 {) N
(   ) S
(if) K
( \(~AN_panel_pc_mouse_1[2] == 5\) {) p n
() S 8 T (AN_pc\(\);) N
(   }) N
(}) N
(proc AN_panel_hold_click : ~AN_panel_hold_mouse_1 {) N
(   ) S
(if) K
( \(~AN_panel_hold_mouse_1[2] == 5\) {) p n
() S 8 T (AN_hold\(\);) N
(   }) N
(}) N
(proc AN_panel_compute_click : ~AN_panel_compute_mouse_1 {) N
(   ) S
(if) K
( \(~AN_panel_compute_mouse_1[2] == 5\) {) p n
() S 8 T (AN_compute\(\);) N
(   }) N
(}) N
(proc AN_panel_repop_click : ~AN_panel_repop_mouse_1 {) N
(   ) S
(if) K
( \(~AN_panel_repop_mouse_1[2] == 5\) {) p n
() S 8 T (AN_repop\(\);) N
(   }) N
(}) N
() N
(##------------------------------------------------------------------------------) c n
(## Logic to control background of buttons) N
(##------------------------------------------------------------------------------) N
() p n
(AN_panel_potSet_bg is \(\(AN_mode_potset==1\) ? AN_panel_bgOn : AN_panel_bgOff\);) N
(AN_panel_pc_bg is  \(\(AN_mode_pc==1\) ? AN_panel_bgOn : AN_panel_bgOff\);) N
(AN_panel_hold_bg is \(\(AN_mode_hold==1\) ? AN_panel_bgOn : AN_panel_bgOff\);) N
(AN_panel_compute_bg is \(\(AN_mode_compute==1\) ? AN_panel_bgOn : AN_panel_bgOff\);) N
(AN_panel_repop_bg is \(\(AN_mode_repop==1\) ? AN_panel_bgOn : AN_panel_bgOff\);) N
() N
(AN_panel_bgOn=") S
(green) str
(";) p n
(AN_panel_bgOff=") S
(darkgrey) str
(";) p n
() N
(##------------------------------------------------------------------------------) c n
(## Link to computer observables) N
(##------------------------------------------------------------------------------) N
() p n
(AN_panel_time is str\(AN_time\);) N
(AN_panel_repopPeriod is str\(AN_repopPeriod\);) N
(panel.e) (Page 3/3) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(panel.e) (5/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## parser.e                                         Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(##------------------------------------------------------------------------------) c n
(## Preamble) N
(##------------------------------------------------------------------------------) N
(## Load the up-to-date AOP) N
(cd\(") p
(aop_v204) str
("\);) p n
(include\(") S
(Run.e) str
("\);) p n
(cd\(") S
(..) str
("\);) p n
() N
(## Name of Notation) c n
(AN_notationName=") p
(%analog) str
(";) p n
() N
(##------------------------------------------------------------------------------) c n
(## Top-Level Rules) N
(##------------------------------------------------------------------------------) N
() p n
(## Initial Rule \(split by newline\) ) c n
(ANparse_init = [") p
(\\n) str
(", ") p
(ANparse_stm) str
(", []];) p n
() N
(## Split statements by ";" character -> COMMANDS \(first COMMAND is openPanel\)) c n
(ANparse_stm = [") p
(suffix) str
(", ") p
(;) str
(", ") p
(ANparse_openPanel) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("] ];) p n
() N
(## General Error Case) c n
(ANparse_Err = [ ") p
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Not a valid ) str
(" // AN_notationName) p n
( // ") S
( definition or command.\\n\\n\\"\);) str
("]]];) p n
() N
(##------------------------------------------------------------------------------) c n
(## COMMANDS) N
(##) N
(## Match Commands:) N
(##   openPanel, mode commands , period 'definition') N
(## Then match DEFINITIONS ) N
(##------------------------------------------------------------------------------) N
() p n
(## Looks for the command "open_panel;" ) c n
(##   and opens a window for mode switching and clock display) N
() p n
(ANparse_openPanel = [ ") S
(literal) str
(", ") p
(open_panel) str
(", [ ") p
(fail) str
(", ") p
(ANparse_mode) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(include\(\\"panel.e\\"\);) str
("]]];) p n
() N
(## Looks for the "mode" statement and switches to the relevent mode.) c n
() p n
(ANparse_mode = [ ") S
(prefix) str
(", ") p
(mode) str
(", ") p
(ANparse_mode1) str
(", [ ") p
(fail) str
(", ") p
(ANparse_repopPeriod) str
("]];) p n
() N
(ANparse_mode1 = [ ") S
(literal) str
(", ") p
(potset) str
(", [ ") p
(fail) str
(", ") p
(ANparse_mode2) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_potset\(\);) str
("]]];) p n
() N
(ANparse_mode2 = [ ") S
(literal) str
(", ") p
(reset) str
(", [ ") p
(fail) str
(", ") p
(ANparse_mode3) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_pc\(\);) str
("]]];) p n
() N
(ANparse_mode3 = [ ") S
(literal) str
(", ") p
(hold) str
(", [ ") p
(fail) str
(", ") p
(ANparse_mode4) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_hold\(\);) str
("]]];) p n
() S 8 T () S 16 T () S 24 T () N
(ANparse_mode4 = [ ") S
(literal) str
(", ") p
(compute) str
(", [ ") p
(fail) str
(", ") p
(ANparse_mode5) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_compute;) str
("]]];) p n
() S 8 T () S 16 T () S 24 T () N
(ANparse_mode5 = [ ") S
(literal) str
(", ") p
(repop) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("],) p n
(parser.e) (Page 1/4) (Nov 08, 04 15:29) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_repop\(\);) str
("]]];) p n
() N
() N
(## Matches the definition of the period for rep-op e.g "period=1000;") c n
() p n
(ANparse_repopPeriod = [ ") S
(prefix) str
(", ") p
(period=) str
(", ") p
(ANparse_int) str
(", [ ") p
(fail) str
(", ") p
(ANparse_depend) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [") p
(now) str
(", ") p
(AN_repopPeriod is int\($p1[1]\);) str
("]]];) p n
() N
() N
() N
(##------------------------------------------------------------------------------) c n
(## DEFINITIONS) N
(##) N
(## Match Definitions ) N
(##   all of form <LHS NAME>=<RHS NAME> | FUNCTION\(<RHS NAME LIST>\)) N
(##) N
(##   scale, summer, integrator, amplifyer -> ERROR) N
(##------------------------------------------------------------------------------) N
() p n
(## EQUALS SIGN:  Dependency) c n
(ANparse_depend = [ ") p
(pivot) str
(", ") p
(=) str
(", [") p
(ANparse_name) str
(", ") p
(ANparse_scale) str
("], [ ") p
(fail) str
(", ") p
(ANparse_Err) str
() p n
("], ) N
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1 // $p2;ANparse_add\($v\);) str
(" ]]]; ) p n
() N
() N
(## Scale declaration:) c n
(ANparse_scale = [ ") p
(prefix) str
(", ") p
(scale\() str
(", ") p
(ANparse_scale1) str
(", [ ") p
(fail) str
(", ") p
(ANparse_summer) str
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = [\\"scale\\"] // $p1;) str
(" ]]];) p n
(ANparse_scale1 = [ ") S
(suffix) str
(", ") p
(\)) str
(", ") p
(ANparse_scale2) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1;) str
(" ]]];) p n
(ANparse_scale2 = [ ") S
(pivot) str
(", ") p
(,) str
(", [") p
(ANparse_potVal) str
(", ") p
(ANparse_name_special) str
("], [ ") p
(fail) str
(", ") p
(AN) str n
(parse_scale2Err) S
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1 // $p2;) str
(" ]]];) p n
(ANparse_scale2Err = [ ") S
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Incorrect syntax for definition sca) str n
(le.\\n\\n\\"\);) S
("]]];) p n
() N
() N
() N
(## Summer declaration:) c n
(ANparse_summer = [ ") p
(prefix) str
(", ") p
(summer\() str
(", ") p
(ANparse_summer1) str
(", [ ") p
(fail) str
(", ") p
(ANparse_integrator) str
("],) p n
( ) N
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = [\\"summer\\"] // $p1;) str
(" ]]];) p n
(ANparse_summer1 = [ ") S
(suffix) str
(", ") p
(\)) str
(", ") p
(ANparse_summer2) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1;) str
(" ]]];) p n
(ANparse_summer2 = [ ") S
(pivot) str
(", ") p
(,) str
(", [") p
(ANparse_name_special) str
(", ") p
(ANparse_name_special) str
("], [ ") p
(fail) str
(") p n
(, ") S
(ANparse_summer2Err) str
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1 // $p2;) str
(" ]]];) p n
(ANparse_summer2Err = [ ") S
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Incorrect syntax for definition s) str n
(ummer.\\n\\n\\"\);) S
("]]];) p n
() N
() N
() N
(## Integrator declaration:) c n
(ANparse_integrator = [ ") p
(prefix) str
(", ") p
(integrator\() str
(", ") p
(ANparse_integrator1) str
(", [ ") p
(fail) str
(", ") p
(ANparse_ampli) str n
(fyByTen) S
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = [\\"integrator\\"] // $p1;) str
(" ]]];) p n
(ANparse_integrator1 = [ ") S
(suffix) str
(", ") p
(\)) str
(", ") p
(ANparse_integrator2) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1;) str
(" ]]];) p n
(ANparse_integrator2 = [ ") S
(pivot) str
(", ") p
(,) str
(", [") p
(ANparse_name_special) str
(", ") p
(ANparse_name_special) str
("], [ ) p n
(") S
(fail) str
(", ") p
(ANparse_integrator2Err) str
("], ) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1 // $p2;) str
(" ]]];) p n
(ANparse_integrator2Err = [ ") S
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Incorrect syntax for defini) str n
(parser.e) (Page 2/4) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(parser.e) (6/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(tion integrator.\\n\\n\\"\);) str
("]]];) p n
() N
() N
() N
(## Amplifyer declaration:) c n
(ANparse_amplifyByTen = [ ") p
(prefix) str
(", ") p
(amplify\() str
(", ") p
(ANparse_amplifyByTen1) str
(", [ ") p
(fail) str
(", ") p
(ANparse) str n
(_name_special) S
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = [\\"amplifyByTen\\"] // $p1;) str
(" ]]];) p n
(ANparse_amplifyByTen1 = [ ") S
(suffix) str
(", ") p
(\)) str
(", ") p
(ANparse_name) str
(", [ ") p
(fail) str
(", ") p
(ANparse_Err) str
("],) p n
() S 8 T () S 16 T () S 24 T ([ ") S
(action) str
(", [ ") p
(later) str
(", ") p
($v = $p1;) str
(" ]]];) p n
() N
() N
(##------------------------------------------------------------------------------) c n
(## NAMES) N
(##------------------------------------------------------------------------------) N
() p n
(## RHS NAMES: +,-,0 and \(LHS NAMES\)) c n
(ANparse_name_special = [ ") p
(literal) str
(", ") p
(+) str
(", [") p
(fail) str
(", ") p
(ANparse_name_special1) str
("], [") p
(action) str
(",) p n
([") S
(now) str
(",") p
($v=[\\"AN_REFERENCE_POSITIVE\\"];) str
("]] ];) p n
(ANparse_name_special1 = [ ") S
(literal) str
(", ") p
(-) str
(", [") p
(fail) str
(", ") p
(ANparse_name_special2) str
("], [") p
(action) str
(",) p n
([") S
(now) str
(",") p
($v=[\\"AN_REFERENCE_NEGATIVE\\"];) str
("]] ];) p n
(ANparse_name_special2 = [ ") S
(literal) str
(", ") p
(0) str
(", [") p
(fail) str
(", ") p
(ANparse_name) str
("], [") p
(action) str
(",) p n
([") S
(now) str
(",") p
($v=[\\"AN_REFERENCE_ZERO\\"];) str
("]] ];) p n
() N
(## RHS NAMES: lowercase, can't begin with digit or underscore.) c n
(ANparse_name = [ ") p
(literal_re) str
(", ") p
([a-z]+[a-z,0-9,_]*) str
(", [") p
(fail) str
(", ") p
(ANparse_nameErr) str
("], [") p
(action) str
(", ) p n
([") S
(now) str
(",") p
($v=[\\"$t\\"];) str
("]] ];) p n
() N
(## Unmatched name error) c n
(ANparse_nameErr = [ ") p
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Not a valid ) str
(" // AN_notation) p n
(Name // ") S
( variable name.\\n\\n\\"\);) str
("]]];) p n
() N
(##------------------------------------------------------------------------------) c n
(## VALUES) N
(##------------------------------------------------------------------------------) N
() p n
(## Values for scaling potentiometers range over the interval \(0,1\)) c n
(ANparse_potVal = [ ") p
(literal_re) str
(", ") p
(0.[0-9]+) str
(" , [") p
(fail) str
(", ") p
(ANparse_potValErr) str
("], [") p
(action) str
(", [") p
(now) str
() p n
(",") S
($v=[\\"$t\\"];) str
("]] ];) p n
(ANparse_potValErr = [ ") S
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Can only scale by values in the in) str n
(terval \(0,1\).\\n\\n\\"\);) S
("]]];) p n
() N
(## Integers) c n
(ANparse_int = [ ") p
(literal_re) str
(", ") p
([0-9]+) str
(" , [") p
(fail) str
(", ") p
(ANparse_intErr) str
("], [") p
(action) str
(", [") p
(now) str
(",") p
($v=[\\") str n
($t\\"];) S
("]] ];) p n
(ANparse_intErr = [ ") S
(read_all) str
(", [], [") p
(action) str
(",[") p
(now) str
(", ") p
(error\(\\"Not an Integer.\\n\\n\\"\);) str
("]]];) p n
() N
(##------------------------------------------------------------------------------) c n
(## Add the notation to eden) N
(##------------------------------------------------------------------------------) N
() p n
(installAOP\(AN_notationName, ") S
(ANparse_init) str
("\);) p n
() N
(##------------------------------------------------------------------------------) c n
(## Translate the parsed notation into eden defintions \(and eddi records\)) N
(##) N
(## y=scale\(0.9,x\);    -> y is AN_filter\(0.9*x\);) N
(## y=summer\(a,b\);     -> y is -1.0*AN_filter\(a+b\);) N
(## y=integrator\(x,ic\) -> y is -1.0*AN_value_y;) N
(##                       AN_addIntegrator\("AN_value_y","x","ic"\);) N
(## y=amplify\(x\);      -> y is AN_filter\(10*x\);) N
(##------------------------------------------------------------------------------) N
(parser.e) (Page 3/4) (Nov 08, 04 15:29) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(proc ANparse_add {) N
(   ) S
(if) K
( \($1) p
(# >= 3\) {) c n
(      ) p
(if) K
( \($1[2] == ") p
(scale) str
("\) { ) p n
(         todo\(") S
(%eden\\n) str
(" //) p n
() S 8 T ( ) S 16 T (") S
(AN_dbCleanUp\(\\") str
(" // $1[1] // ") p
(\\"\);\\n) str
(" //) p n
(      ) S 8 T () S 16 T ($1[1] // ") S
( is AN_filter\() str
(" // $1[3] // ") p
(*) str
(" // $1[4] // ") p
(\);\\n) str
(") p n
() S 8 T (    // AN_notationName \);) N
(      }) N
(      ) S
(else) K
( ) p
(if) K
( \($1[2] == ") p
(summer) str
("\) {) p n
(         todo\(") S
(%eden\\n) str
(" //) p n
() S 8 T ( ) S 16 T (") S
(AN_dbCleanUp\(\\") str
(" // $1[1] // ") p
(\\"\);\\n) str
(" //) p n
(      ) S 8 T () S 16 T ($1[1] // ") S
( is -1.0*AN_filter\() str
(" // $1[3] // ") p
(+) str
(" // $1[4] // ") p
(\);\\n) str
(") p n
() S 8 T (    // AN_notationName \);) N
(      }) N
(      ) S
(else) K
( ) p
(if) K
( \($1[2] == ") p
(integrator) str
("\) {) p n
(         todo\(") S
(%eden\\n) str
(" //) p n
(      ) S 8 T () S 16 T ($1[1] // ") S
( is -1.0*AN_value_) str
(" // $1[1] // ") p
(;\\n) str
(" //) p n
() S 8 T () S 16 T (") S
(AN_value_) str
(" // $1[1] // ") p
( is ) str
(" // $1[4] // ") p
(;\\n) str
(" //) p n
(               ") S
(AN_addIntegrator\(\\"AN_value_) str
(" // $1[1] // ") p
(\\",\\") str
(" // $1[3] // ") p
(\\",\\") str
(" // $) p n
(1[4] // ") S
(\\"\);\\n) str
(") p n
() S 8 T (    // AN_notationName \);) N
(      }) N
(      ) S
(else) K
( ) p
(if) K
( \($1[2] == ") p
(amplifyByTen) str
("\) {) p n
(         todo\(") S
(%eden\\n) str
(" //) p n
() S 8 T ( ) S 16 T (") S
(AN_dbCleanUp\(\\") str
(" // $1[1] // ") p
(\\"\);\\n) str
(" //) p n
(      ) S 8 T () S 16 T ($1[1] // ") S
( is AN_filter\() str
(" // ") p
(10.0 * ) str
(" // $1[3] // ") p
(\);\\n) str
(") p n
() S 8 T (    // AN_notationName \);) N
(      }) N
(   } ) S
(else) K
( ) p
(if) K
( \($1) p
(# == 2\) {) c n
(         todo\(") p
(%eden\\n) str
(" //) p n
() S 8 T ( ) S 16 T (") S
(AN_dbCleanUp\(\\") str
(" // $1[1] // ") p
(\\"\);\\n) str
(" //) p n
(      ) S 8 T () S 16 T ($1[1] // ") S
( is ) str
(" // $1[2] // ") p
(;\\n) str
(") p n
() S 8 T (    // AN_notationName \);) N
(   }) N
(}) N
(parser.e) (Page 4/4) (Nov 08, 04 15:29) title
border
grestore
(Printed by Charles Care) rhead
(parser.e) (7/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(##==============================================================================) c n
(##           A Notation for Electronic Analog Computing \(%analog\)) N
(##) N
(## Main File \(Run.e\)                                Charlie Care - November 2004) N
(##==============================================================================) N
() p n
(## Definitons of EDDI tables and their ADD/REMOVE procedures) c n
(include\(") p
(integratorTables.eddi) str
("\);) p n
() N
(## Definitons of procedures that update state and perform the integration) c n
(## using information stored in EDDI tables) N
(include\(") p
(integrators.e) str
("\);) p n
() N
(## Definitions of the clocking process \(including rep-op\)) c n
(include\(") p
(clock.e) str
("\);) p n
() N
(## Definitons to enable switching between the five modes of operation) c n
(include\(") p
(modes.e) str
("\);) p n
() N
(## The definitions used to parse the notation \(uses the AOP version 2.04\)) c n
(include\(") p
(parser.e) str
("\);) p n
(Run.e) (Page 1/1) (Nov 08, 04 13:29) title
border
grestore
(Printed by Charles Care) rhead
(Run.e) (8/8) (Monday November 08, 2004) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
