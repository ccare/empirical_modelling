%!PS-Adobe-3.0
%%Title: planimeter.eden
%%For: Charles Care
%%Creator: a2ps version 4.13
%%CreationDate: Wed Feb  4 10:02:24 2004
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%Requirements: Tumble Duplex 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
%% Pagedevice definitions:
countdictstack
% Push our own mark, since there can be several PS marks pushed depending
% where the failure really occured.
/a2ps_mark
{
%%BeginFeature: *Tumble False
  (<<) cvx exec /Tumble (false) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
%%BeginFeature: *Duplex True
  (<<) cvx exec /Duplex (true) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
} stopped
% My cleartomark
{ /a2ps_mark eq { exit } if } loop
countdictstack exch sub dup 0 gt
{
  { end } repeat
}{
  pop
} ifelse
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(## ********************************************************) p n
(##   Sasami Visualisation of a Wheel and Disc Planimeter   ) N
(## ********************************************************) N
() N
(## ========================================================) N
(## |               Inputs and Initialisation              |) N
(## ========================================================) N
() N
(## Expected Inputs ----------------------------------------) N
(## planimeter_xy: list\(real\) A two element list [x,y]) N
(## inputRange_x: list\(real\)  A two element list [minX,maxX]) N
(## inputRange_y: list\(real\)  A two element list [minY,maxY]) N
(## --------------------------------------------------------) N
() N
(## Associating Inputs -------------------------------------) N
(## From the server comes the input with a range) N
(## we want penPos t range 0 to 1) N
(##  and yInput to range -1 to 1) N
() N
(## Resolve Inputs) N
(range_x is inputRange_x[2]-inputRange_x[1];) N
(range_y is inputRange_y[2]-inputRange_y[1];) N
() N
(yFract is \(planimeter_xy[2]-inputRange_y[1]+0.0\)/range_y;) N
(xFract is \(planimeter_xy[1]-inputRange_x[1]+0.0\)/range_x;) N
() N
(## Get these into appropriate forms \(see code below\)) N
(wheelPos is 0+xFract;) N
(carriagePos is -8+16*yFract;) N
(## --------------------------------------------------------) N
() N
(## Initialisation -----------------------------------------) N
(%eden) N
(include\("materials.sasami"\);) N
(%sasami) N
(open_display) N
(%eden) N
(sasami_show_axes=0;) N
(## --------------------------------------------------------) N
() N
(## ========================================================) N
(## |                  The Sasami Model                    |) N
(## ========================================================) N
() N
(## The Cone -----------------------------------------------) N
(## Import the Cone Object file, Dimensions of the cone are:) N
(##) N
(##     .     ^                                             ) N
(##    . .    |                                         ) N
(##   .   .   |10 units                                 ) N
(##  .     .  |                                             ) N
(##  -------  |                                            ) N
(##  <----->) N
(##  5 units) N
(##) N
(## The cone needs to therefore be rotate through 15 degrees to) N
(##  become horizontal.) N
() N
(## The cone has accumulated rotation ) N
(coneRotation=0;) N
() N
(## and a varying rotation) N
(planimeter.eden) (Page 1/9) (Feb 03, 04 15:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(coneSpindleRotation is -360*carriagePos/\(2.5*2*PI\);) N
() N
(%sasami) N
(load_obj cone "cone_point.obj") N
(object_rot cone_1 15 0 coneRotation) N
() N
(## The cone moves along the x axis with the carriage) N
(%sasami) N
(object_pos cone_1 carriagePos 0 0 ) N
(## Add marker to the cone \(aids the visualistation of rotation\)) N
(vertex cone_markerA 1 1.25 0.3) N
(vertex cone_markerB 1.25 1.25  0.3) N
(vertex cone_markerC 1.25 1  0.3) N
(vertex cone_markerD 1 1 0.3) N
(polygon cone_marker) N
(poly_geom_vertex cone_marker cone_markerD cone_markerC cone_markerB cone_markerA) N
(object_poly cone_1 cone_marker) N
(## --------------------------------------------------------) N
() N
(## The Roller ---------------------------------------------) N
(## Distance between cone and roller) N
(%eden) N
(shaft_length=6;) N
() N
(## Position of roller) N
(roller_pos_x is carriagePos;) N
(roller_pos_y is -shaft_length*sin\(PI/12\);) N
(roller_pos_z is shaft_length*cos\(PI/12\);) N
() N
(## Size of roller) N
(roller_size = 0.3;) N
() N
(## Load Roller in correct postition) N
(%sasami) N
(load_obj roller "disc.obj") N
(object_pos roller_1 roller_pos_x roller_pos_y roller_pos_z) N
(object_rot roller_1 15 0 coneRotation) N
(object_scale roller_1 roller_size roller_size 8*roller_size) N
() N
(## Add marker to the roller \(aids the visualistation of rotation\)) N
(vertex roller_markerA 2 2.5 0.3) N
(vertex roller_markerB 2.5 2.5 0.3) N
(vertex roller_markerC 2.5 2 0.3) N
(vertex roller_markerD 2 2 0.3) N
(polygon roller_marker) N
(poly_geom_vertex roller_marker roller_markerD roller_markerC roller_markerB roll) N
(er_markerA) N
(object_poly roller_1 roller_marker) N
(## --------------------------------------------------------) N
() N
() N
(## Shaft between Roller and Cone --------------------------) N
(## load definitions for the shaft) N
(%eden) N
(include\("shaft.sasami"\);) N
() N
(## Set position between the cone and roller) N
(## make a little longer so it goes through the roller.) N
(%sasami) N
(object_pos shaft carriagePos 0 0 ) N
(object_scale shaft 0.02 0.02 \(shaft_length+8*roller_size*0.3\)/0.2) N
(planimeter.eden) (Page 2/9) (Feb 03, 04 15:45) title
border
grestore
(Printed by Charles Care) rhead
(planimeter.eden) (1/5) (Wednesday February 04, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(object_rot shaft 15 0 coneRotation) p n
(## --------------------------------------------------------) N
() N
(## The Carriage -------------------------------------------) N
(## Import the carriage) N
(%eden) N
(include\("carriage.sasami"\);) N
(%sasami) N
(object_pos carriage carriagePos 0 0) N
(## --------------------------------------------------------) N
() N
(## The Track ----------------------------------------------) N
(%eden) N
(include\("track.eden"\);) N
(%eden) N
(track_pos_z is shaft_length*cos\(PI/12\)-track_width_1/2;) N
(track_pos_x is track_length/2;) N
(track_pos_y is -shaft_length*sin\(PI/12\)-5*roller_size*cos\(PI/12\)-track_height_1;) N
(## --------------------------------------------------------) N
() N
(## Pen and Wheel ------------------------------------------) N
(## Load the wheel, pen and linkage) N
(%eden) N
(## A variable controls position of wheel) N
(## \(wheelPos ranges from 0 to 1\)) N
() N
(## The Wheel has an angular displacement) N
(wheelRotation = 0;) N
() N
(## Size of wheel and Shaft) N
(wheel_size = 0.3;) N
(wheel_shaft_size is wheel_size/20;) N
(wheel_shaft_length is wheel_size*3;) N
() N
(wheel_pos_x is carriagePos;) N
(wheel_pos_y = 2.5*cos\(PI/12\)+5*wheel_size;) N
(wheel_pos_z is 2.5*sin\(PI/12\)-wheel_width-9.85*\(1-wheelPos\);) N
() N
(wheel_shaft_pos_z is wheel_pos_z-\(wheel_shaft_length/2\);) N
(wheel_width is 0.15*wheel_size;) N
() N
(## Import the wheel with these constraints) N
(%sasami) N
(load_obj wheel "disc_taper.obj") N
(object_pos wheel_1 wheel_pos_x wheel_pos_y wheel_pos_z) N
(object_rot wheel_1 0 0 wheelRotation) N
(object_scale wheel_1 wheel_size wheel_size wheel_size) N
() N
(## Add marker to the wheel \(aids the visualistation of rotation\)) N
(vertex wheel_markerA 2 2.5 0.3) N
(vertex wheel_markerB 2.5 2.5 0.3) N
(vertex wheel_markerC 2.5 2 0.3) N
(vertex wheel_markerD 2 2 0.3) N
(polygon wheel_marker) N
(poly_geom_vertex wheel_marker wheel_markerD wheel_markerC wheel_markerB wheel_ma) N
(rkerA) N
(object_poly wheel_1 wheel_marker) N
(%eden) N
(include\("wheel_shaft.sasami"\);) N
(%sasami) N
(object_pos wheel_shaft wheel_pos_x wheel_pos_y wheel_shaft_pos_z) N
(object_scale wheel_shaft 0.02 0.02 \(wheel_shaft_length/0.2\)) N
(planimeter.eden) (Page 3/9) (Feb 03, 04 15:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(object_rot wheel_shaft 0 0 wheelRotation) p n
() N
(%eden) N
() N
(pen_shaft_length = 30;) N
() N
(include\("pen_shaft.sasami"\);) N
() N
(%sasami) N
(object_pos pen_shaft wheel_pos_x+5 wheel_pos_y wheel_shaft_pos_z-11) N
(object_scale pen_shaft 0.02 0.02 \(pen_shaft_length/0.2\)) N
() N
(%eden) N
(include\("pen.sasami"\);) N
(%sasami) N
() N
(object_scale pen 0.02 0.02 0.6) N
(object_rot pen 90 0 0) N
(object_pos pen wheel_pos_x+5 wheel_pos_y wheel_shaft_pos_z-11.1+pen_shaft_length) N
() N
(%eden) N
(include\("wheel_linkage.sasami"\);) N
() N
() N
(## --------------------------------------------------------) N
() N
(## ========================================================) N
(## |                  The Control Panel                   |) N
(## ========================================================) N
() N
(## Window Content: Clock Status ---------------------------) N
(%donald) N
(viewport clockStat) N
() N
(openshape clockLabel) N
(within clockLabel {) N
(  circle g,r) N
(  point Cg,Cr) N
(  int radius) N
(  Cg = {0,-4}) N
(  Cr = {0,4}) N
(  radius = 3) N
(  g=circle\(Cg,radius\)) N
(  r=circle\(Cr,radius\)) N
(}) N
(## --------------------------------------------------------) N
() N
(## Window Content: Wheel Status ---------------------------) N
(%donald) N
(viewport IntWheel) N
() N
(openshape wheelEnd ) N
(within wheelEnd {) N
(  circle wheel) N
(  point centre) N
(  real radius,rotation) N
(  centre = {0,0}) N
(  wheel = circle\(centre,radius\)) N
(  radius = 4.0) N
(  ) N
(  ## Dotted lines on the wheel) N
(  real halfpi) N
(planimeter.eden) (Page 4/9) (Feb 03, 04 15:45) title
border
grestore
(Printed by Charles Care) rhead
(planimeter.eden) (2/5) (Wednesday February 04, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  real angleA,angleB,angleC,angleD  ) p n
(  point A,B,C,D) N
(  line X,Y  ) N
(  ) N
(  angleA = halfpi) N
(  angleB = 2*halfpi) N
(  angleC = 3*halfpi) N
(  angleD = 4*halfpi) N
(  A = centre + {radius*sin\(angleA+rotation\),radius*cos\(angleA+rotation\)}) N
(  B = centre + {radius*sin\(angleB+rotation\),radius*cos\(angleB+rotation\)}) N
(  C = centre + {radius*sin\(angleC+rotation\),radius*cos\(angleC+rotation\)}) N
(  D = centre + {radius*sin\(angleD+rotation\),radius*cos\(angleD+rotation\)}) N
(  X = [A,C]) N
(  Y = [B,D]) N
(}) N
(## Eden Code to support the wheel definitions) N
() N
(?_wheelEnd_rotation is PI*\(wheelRotation/180\);) N
(?_wheelEnd_halfpi = PI / 2;) N
(?A_wheelEnd_X = "linestyle=dotted";) N
(?A_wheelEnd_Y = "linestyle=dotted";) N
(?A_wheelEnd_wheel = "outlinecolor=red";) N
(## --------------------------------------------------------) N
() N
(## Window Content: Rev Counter ----------------------------) N
(%eden) N
(wheelRevs is wheelRotation/360;) N
(wheelRevDisplay is wheelRevs-wheelRevZero;) N
(wheelRevZero=0;) N
() N
(%donald) N
(viewport Revs) N
(label revs) N
() N
(%eden) N
(_revs is label\(wheelRevDisplay, cart\(0, 0\)\);) N
(## --------------------------------------------------------) N
(  ) N
(## Window Content: Area Counter ---------------------------) N
(%eden) N
() N
(## scale by variable calibrate) N
(## calibrate is the number of revolutions per unit area) N
(calibrate = 1;) N
() N
(areaZero is wheelRevZero/calibrate;) N
(areaTraced is wheelRevs/calibrate;) N
() N
(%donald) N
(viewport Area) N
(label area) N
() N
(%eden) N
(_area is label\(areaTraced-areaZero, cart\(0, 0\)\);) N
(## --------------------------------------------------------) N
() N
(## Windows: Wheel Output ----------------------------------) N
(%scout) N
(window WheelTitle = {) N
(  type: TEXT,) N
(  frame: \([{10,10},{150,25}]\),) N
(  sensitive: OFF,) N
(planimeter.eden) (Page 5/9) (Feb 03, 04 15:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  string: "Integrating Wheel",) p n
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 0) N
(};) N
(window WheelDisplay = {) N
( type: DONALD,) N
(   box: [{20,30},{140,150}],) N
(  sensitive: OFF,) N
(  pict: "IntWheel",) N
(  border: 1,) N
(  xmin:-5) N
(  xmax: 5) N
(  ymin: -5) N
(  ymax:5) N
(  bgcolor: "Grey60") N
(  border: 1) N
(};) N
(## --------------------------------------------------------) N
() N
(## Windows: Revs Output -----------------------------------) N
(%scout) N
(window RevsTitle = {) N
(  type: TEXT,) N
(  frame: \([{150,10},{290,25}]\),) N
(  sensitive: OFF,) N
(  string: "Wheel Revolutions",) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 0) N
(};) N
() N
(window RevsDisplay = {) N
( type: DONALD,) N
(   box: [{160,30},{280,60}],) N
(  sensitive: OFF,) N
(  pict: "Revs",) N
(  border: 1,) N
(  xmin:-5) N
(  xmax: 5) N
(  ymin: -5) N
(  ymax:5) N
(  bgcolor: "Grey60") N
(  border: 1) N
(};) N
(## --------------------------------------------------------) N
() N
(## Windows: Area Output -----------------------------------) N
(%scout) N
(window AreaTitle = {) N
(  type: TEXT,) N
(  frame: \([{150,70},{290,85}]\),) N
(  sensitive: OFF,) N
(  string: "Area Traced",) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 0) N
(};) N
() N
(window AreaDisplay = {) N
( type: DONALD,) N
(   box: [{160,90},{280,120}],) N
(planimeter.eden) (Page 6/9) (Feb 03, 04 15:45) title
border
grestore
(Printed by Charles Care) rhead
(planimeter.eden) (3/5) (Wednesday February 04, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  sensitive: OFF,) p n
(  pict: "Area",) N
(  border: 1,) N
(  xmin:-5) N
(  xmax: 5) N
(  ymin: -5) N
(  ymax:5) N
(  bgcolor: "Grey60") N
(  border: 1) N
(};) N
(## --------------------------------------------------------) N
() N
(## Windows: Clock Output ----------------------------------) N
(%scout) N
(window TitleClock = {) N
(  type: TEXT,) N
(  frame: \([{300,10},{370,25}]\),) N
(  sensitive: OFF,) N
(  string: "Clock",) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 0) N
(};) N
() N
(window clockStatus = {) N
(  type: DONALD,) N
(  box: [{300,30},{370,120}],) N
(  sensitive: OFF,) N
(  pict: "clockStat",) N
(  border: 1,) N
(  xmin:-7) N
(  xmax: 7) N
(  ymin: -9) N
(  ymax:9) N
(  bgcolor: "Grey60") N
(};) N
(## --------------------------------------------------------) N
() N
(## Buttons ------------------------------------------------) N
(%scout) N
(window ButtonReset = {) N
(  type: TEXT,) N
(  frame: \([{165,135},{210,150}]\),) N
(  sensitive: ON,) N
(  string: "Reset",) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 1) N
(};) N
(window ButtonCalibrate = {) N
(  type: TEXT,) N
(  frame: \([{220,135},{275,150}]\),) N
(  sensitive: ON,) N
(  string: "Calibrate",) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 1) N
(};) N
() N
(string textStartStop = "Start";) N
(window ButtonStartStop = {) N
(  type: TEXT,) N
(planimeter.eden) (Page 7/9) (Feb 03, 04 15:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  frame: \([{310,135},{360,150}]\),) p n
(  sensitive: ON,) N
(  string: textStartStop,) N
(  font: "{Helvetica 12 bold}",) N
(  alignment: CENTRE,) N
(  border: 1) N
(};) N
(## --------------------------------------------------------) N
() N
(## Add to Screen ------------------------------------------) N
(%scout) N
(screen = <WheelTitle/WheelDisplay/RevsTitle/RevsDisplay/AreaTitle/AreaDisplay/Ti) N
(tleClock/clockStatus/ButtonReset/ButtonStartStop/ButtonCalibrate>;) N
(## --------------------------------------------------------) N
() N
() N
(## ========================================================) N
(## |   The Relationship between the cone and the wheel    |) N
(## |       \(with respect to a 'time' incrementor\)         |) N
(## ========================================================) N
() N
() N
(## The Clock ----------------------------------------------) N
(%eden) N
(## A variable that is 1 when clock is running) N
(clockGoing = 0;) N
() N
(## The change in the disc rotation is an angular displacement) N
(##  equal to the carriage's movement along the track) N
() N
(proc clock {) N
(  ## Cone speed is the change in angular displacement in ) N
(  ## the last time unit) N
(  coneSpeed = coneSpindleRotation-coneRotation; ## rads / time) N
(  ## discRotation is accumulated) N
(  coneRotation = coneRotation+coneSpeed;) N
(  ## wheelSpeed is defined in terms of the discSpeed) N
(  ##  And is the change in angular displacement  ) N
(  ##  during the last time unit) N
(  wheelSpeed = -\(wheelPos*coneSpeed\);) N
(  ## wheelRotation is accumulated) N
(  wheelRotation = wheelRotation+wheelSpeed;) N
(  ## Re-run this procedure soon.) N
(  if \(clockGoing == 1\) {) N
(    todo\("clock\(\);"\);) N
(  }) N
(};) N
(## --------------------------------------------------------) N
() N
(## Reset --------------------------------------------------) N
(##  Resets the counters) N
(%eden) N
(proc reset: ~ButtonReset_mouse_1 {) N
(  ## Set rev and area counter zero points to current values) N
(  wheelRevZero=wheelRevs;) N
(};) N
(## --------------------------------------------------------) N
() N
(## Start-Stop ---------------------------------------------) N
(##  Starts \(and stops\) the clock) N
(%eden) N
(proc startstop: ~ButtonStartStop_mouse_1 {) N
(planimeter.eden) (Page 8/9) (Feb 03, 04 15:45) title
border
grestore
(Printed by Charles Care) rhead
(planimeter.eden) (4/5) (Wednesday February 04, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  if \(~ButtonStartStop_mouse_1[2] == 4\) {) p n
(    ## if clock isn't already going then start it) N
(    if \(clockGoing == 0\) {) N
(      start\(\);) N
(    } else {) N
(    ## if the clock is going then stop it) N
(      stop\(\);) N
(    }) N
(  } ) N
(};) N
(## --------------------------------------------------------) N
() N
(## stop ---------------------------------------------------) N
(proc stop {) N
(  clockGoing = 0;) N
(  textStartStop = "Start";) N
(  A_clockLabel_g = "outlinecolor=Black,color=Black,fill=solid";) N
(  A_clockLabel_r = "outlinecolor=Red,color=Red,fill=solid";) N
(};) N
(## --------------------------------------------------------) N
() N
(## start --------------------------------------------------) N
(proc start {) N
(  clockGoing = 1;) N
(  textStartStop = "Stop";) N
(  A_clockLabel_g = "outlinecolor=Green,color=Green,fill=solid";) N
(  A_clockLabel_r = "outlinecolor=Black,color=Black,fill=solid";) N
(  clock\(\);) N
(};) N
(## --------------------------------------------------------) N
() N
(## Calibrate ----------------------------------------------) N
(##  Declares the area traced as the unit square) N
(%eden) N
(proc doCalibrate: ~ButtonCalibrate_mouse_1 {) N
( if \(wheelRevDisplay != 0\) {) N
(   calibrate = wheelRevDisplay;) N
( } else {) N
(   calibrate = 1;) N
( }) N
(};) N
(## --------------------------------------------------------) N
() N
(## Get display initialised in stop mode) N
(%eden) N
(stop\(\);) N
() N
() N
() N
() N
(planimeter.eden) (Page 9/9) (Feb 03, 04 15:45) title
border
grestore
(Printed by Charles Care) rhead
(planimeter.eden) (5/5) (Wednesday February 04, 2004) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
