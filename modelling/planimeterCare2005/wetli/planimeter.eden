## ********************************************************
##   Sasami Visualisation of a Wheel and Disc Planimeter   
## ********************************************************

## ========================================================
## |               Inputs and Initialisation              |
## ========================================================

## Expected Inputs ----------------------------------------
## planimeter_xy: list(real) A two element list [x,y]
## inputRange_x: list(real)  A two element list [minX,maxX]
## inputRange_y: list(real)  A two element list [minY,maxY]
## --------------------------------------------------------

## Associating Inputs -------------------------------------
## From the server comes the input with a range
## we want penPos t range 0 to 1
##  and yInput to range -1 to 1

## Resolve Inputs
range_x is inputRange_x[2]-inputRange_x[1];
range_y is inputRange_y[2]-inputRange_y[1];

yFract is (planimeter_xy[2]-inputRange_y[1]+0.0)/range_y;
xFract is (planimeter_xy[1]-inputRange_x[1]+0.0)/range_x;

## Get these into appropriate forms (see code below)
penPos is 0+xFract;
yInput is -1+(yFract*2);
carriagePos is 1-((yInput+1)/2);
## --------------------------------------------------------

## Initialisation -----------------------------------------
%eden
include("macros.eden");
include("materials.sasami");

%sasami
open_display

%eden
sasami_show_axes=0;
## --------------------------------------------------------

## ========================================================
## |                  The Sasami Model                    |
## ========================================================

## Important Dimensions -----------------------------------
## Dimensions of the planimeter
width=10;
length=21;
## Width of shafts
shaftWidth=0.2;
rotatingShaftWidth is shaftWidth/2;
## --------------------------------------------------------

## Tracks -------------------------------------------------
## Planimeter slides on two tracks
##  create these using macro feature
%eden
execute(newCuboid("track1","trackWidth","trackHeight","trackLength","m_track"));
execute(newCuboid("track2","trackWidth","trackHeight","trackLength","m_track"));

## Tracks are positioned parallel to each other 
##  with a gap of trackSep between them
%sasami
object_pos track1 trackInset 0 backWidth
object_pos track2 trackInset+trackWidth+trackSep 0 backWidth

## Some definitions of key dimensions relating to the track
%eden
trackWidth=0.5;
trackHeight=1;
trackLength is length-backWidth;
trackInset=1;
trackSep is width-2*(trackWidth+trackInset);
## --------------------------------------------------------

## Carriage -----------------------------------------------
## On the track rests the carriage
%eden
carriageWidth is width;
carriageLength=10.5;
carriageHeight=0.3;

## Its position is controlled by a variable
##  (carriagePos ranges from 0 to 1)
## carriagePos is defined in initialisation code above

## This is resolved to a real position
carriageZ is backWidth+carriagePos*(2*discRadius);

## The carriage is represented as a rectangular base
execute(newCuboid("carriageBase","carriageWidth","carriageHeight","carriageLength","m_carriage_frame"));
%sasami
object_pos carriageBase 0 trackHeight carriageZ
## --------------------------------------------------------

## Back ---------------------------------------------------
## There is a supporting side at the end of the track
%eden
backHeight=6;
backWidth=0.2;
%eden
execute(newCuboid("back","width","backHeight","backWidth","m_track"));
%sasami
object_pos back 0 0 0
## --------------------------------------------------------

## Pen and Shaft ------------------------------------------
## A sliding pen shaft
%eden
execute(newCuboid("penShaft","penShaftLength","shaftWidth","shaftWidth","m_disc"));
%sasami
object_pos penShaft penShaftX penShaftY penShaftZ

%eden
penShaftLength=20;

## the pen's postion is controlled by a variable
##  (penPos ranges from 0 to 1)
## penPos is defined in initialisation code above
penShaftRange=10;
penShaftX is (carriageWidth-shaftWidth)/2-penShaftLength+(1-penPos)*penShaftRange;
penShaftY is trackHeight+0.5*discSep;
penShaftZ is carriageZ+(carriageLength-shaftWidth)/2;

## Import Definitions of the pen from external file
include("pen.sasami");
## --------------------------------------------------------

## The Disc -----------------------------------------------
%eden
## Disc has a rotation
discRotation=0;
## And a dynamic rotation
discSpindleRotation is 360*penPos;

## After each clock cycle:
##  discRotation == discSpindleRotation

## Separation between disc and carriage
discSep=1.5;

## The disc sits on a shaft which is linked to pen shaft
execute(newCuboid("discShaft","rotatingShaftWidth","0.5*discSep","rotatingShaftWidth","m_disc"));
%sasami
object_pos discShaft carriageWidth/2 trackHeight+carriageHeight+0.5*discSep carriageZ+(carriageLength-shaftWidth)/2
object_rot discShaft 0 discRotation 0 

## Import the disc's vertices
%sasami
load_obj disc "disc.obj"

## Add marker to the disc
##  (Aids the visualistation of rotation)
vertex disc_markerD 2.4 2.5 -0.3
vertex disc_markerC 2.5 2.5 -0.3
vertex disc_markerB 2.5 2.4 -0.3
vertex disc_markerA 2.4 2.4 -0.3
polygon disc_marker
poly_geom_vertex disc_marker disc_markerD disc_markerC disc_markerB disc_markerA
object_poly disc_1 disc_marker

## Position the disc
object_rot disc_1 90 0 discRotation
object_pos disc_1 (carriageWidth)/2 trackHeight+carriageHeight+discSep carriageZ+(carriageLength)/2
## The disc has dimensions of radius 10 and width 0.3 units
%eden
discHeight=0.3;
discRadius=5;
## --------------------------------------------------------

## The Wheel ----------------------------------------------
%eden
## The wheel has a rotation
wheelRotation=0;

## The wheel is connected to the backplate by a shaft
%eden
execute(newShaft("wheelShaft","rotatingShaftWidth","rotatingShaftWidth","0.5*wheelShaftLength","m_wheel"));

%sasami
object_pos wheelShaft carriageWidth/2 trackHeight+carriageHeight+discSep+wheelRadius-(shaftWidth/2) backWidth+(carriageLength-shaftWidth)/2+(discRadius)-0.5*wheelShaftLength
object_rot wheelShaft 0 0 wheelRotation

## Load the wheel object
%sasami
load_obj wheel "disc_taper.obj"

## Add marker to the Wheel
##  (aids the visualistation of rotation)
vertex wheel_markerA 2 2.5 0.3
vertex wheel_markerB 2.5 2.5 0.3
vertex wheel_markerC 2.5 2 0.3
vertex wheel_markerD 2 2 0.3
polygon wheel_marker
poly_geom_vertex wheel_marker wheel_markerD wheel_markerC wheel_markerB wheel_markerA
object_poly wheel_1 wheel_marker

## Position and scale the wheel Object
object_rot wheel_1 0 0 wheelRotation
object_scale wheel_1 wheelScale wheelScale wheelScale
object_pos wheel_1 carriageWidth/2 trackHeight+carriageHeight+discSep+wheelRadius backWidth+(carriageLength)/2+discRadius

## The wheel is loaded with radius=10 units 
##  The scaling factor is derived from a chosen radius
%eden
wheelShaftLength is carriageLength+2;
wheelRadius=1;
wheelScale is 0.1*(wheelRadius*2);
## --------------------------------------------------------


proc clock : discSpindleRotation {
  ## Disc speed is the change in angular displacement in 
  ## the last time unit
  discSpeed = discSpindleRotation-discRotation; ## rads / time
  ## discRotation is accumulated
  discRotation = discRotation+discSpeed;
  ## wheelSpeed is defined in terms of the discSpeed
  ##  And is the change in angular displacement  
  ##  during the last time unit
  wheelSpeed = yInput*discSpeed;
  ## wheelRotation is accumulated
  wheelRotation = wheelRotation+wheelSpeed;
  }